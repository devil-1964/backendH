<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Test Interface</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: #000000;
            color: #ffffff;
            padding: 20px;
            line-height: 1.6;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            margin-bottom: 40px;
        }

        .nav {
            text-align: center;
            margin-bottom: 30px;
        }

        .nav a {
            color: #ffffff;
            text-decoration: underline;
            margin: 0 15px;
        }

        h2 {
            color: #ffffff;
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .note {
            background: #222222;
            border: 1px solid #444444;
            padding: 15px;
            margin-bottom: 30px;
            color: #cccccc;
        }

        .note strong {
            color: #ffffff;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            color: #ffffff;
        }

        input[type="text"],
        input[type="file"],
        textarea {
            width: 100%;
            padding: 10px;
            background: #111111;
            border: 1px solid #333333;
            color: #ffffff;
            font-size: 16px;
        }

        textarea {
            font-family: monospace;
            min-height: 120px;
            resize: vertical;
        }

        button {
            background: #ffffff;
            color: #000000;
            border: none;
            padding: 12px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            margin-top: 10px;
        }

        button:hover {
            background: #cccccc;
        }

        button:disabled {
            background: #666666;
            color: #999999;
            cursor: not-allowed;
        }

        .result {
            background: #111111;
            padding: 15px;
            margin-top: 15px;
            font-family: monospace;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
            display: none;
        }

        .result.success {
            background: #113311;
            color: #88ff88;
        }

        .result.error {
            background: #331111;
            color: #ff8888;
        }

        .sample-format {
            background: #111111;
            padding: 15px;
            margin-top: 15px;
        }

        .sample-format pre {
            color: #cccccc;
            font-size: 0.9em;
        }

        .loading-bar {
            width: 100%;
            height: 4px;
            background: #333333;
            margin: 10px 0;
            display: none;
            overflow: hidden;
        }

        .loading-bar::before {
            content: '';
            display: block;
            width: 0%;
            height: 100%;
            background: #ffffff;
            animation: loading 2s ease-in-out infinite;
        }

        @keyframes loading {
            0% { width: 0%; }
            50% { width: 100%; }
            100% { width: 0%; }
        }
    </style>
</head>

<body>
    <div class="nav">
        <a href="/">Documentation</a>
        <a href="/result">View Results</a>
        <a href="/download">Download CSV</a>
    </div>

    <div class="note">
        <strong>Important:</strong> Follow the steps in order: 1) Store Offer → 2) Upload Leads → 3) Score Leads → 4) View Results
    </div>

    <!-- Step 1: Store Offer -->
    <div class="container">
        <h2>Step 1: Store Offer</h2>
        <form id="offerForm">
            <div class="form-group">
                <label>Offer JSON:</label>
                <textarea id="offerJson" placeholder='{"name": "AI Outreach Automation", "value_props": ["24/7 outreach", "6x more meetings"], "ideal_use_cases": ["B2B SaaS mid-market", "Enterprise sales"]}' required></textarea>
            </div>
            <button type="submit">Store Offer</button>
        </form>
        <div id="offerResult" class="result"></div>
    </div>

    <!-- Step 2: Upload Leads -->
    <div class="container">
        <h2>Step 2: Upload Leads CSV</h2>
        <form id="leadsForm" enctype="multipart/form-data">
            <div class="form-group">
                <label>Select CSV File:</label>
                <input type="file" id="csvFile" accept=".csv" required>
            </div>
            <button type="submit">Upload Leads</button>
        </form>
        <div id="leadsResult" class="result"></div>
        
        <div class="sample-format">
            <strong>Required CSV format:</strong>
            <pre>name,role,company,industry,location,linkedin_bio
John Doe,CEO,TechCorp,Technology,San Francisco,Tech entrepreneur with 10+ years
Jane Smith,VP Sales,SalesForce,Software,New York,Sales leader specializing in B2B</pre>
        </div>
    </div>

    <!-- Step 3: Score Leads -->
    <div class="container">
        <h2>Step 3: Process & Score Leads</h2>
        <button id="scoreBtn" onclick="scoreLeads()">Score All Leads</button>
        <div class="loading-bar" id="loadingBar"></div>
        <div id="scoreResult" class="result"></div>
    </div>

    <!-- Step 4: View Results -->
    <div class="container">
        <h2>Step 4: View Results</h2>
        <button onclick="getResults()">Get Scored Results</button>
        <div id="resultsDisplay" class="result"></div>
    </div>

    <script>
        // Store Offer
        document.getElementById('offerForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            try {
                const offerText = document.getElementById('offerJson').value;
                const offer = JSON.parse(offerText);

                const response = await fetch('/offer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(offer)
                });

                const result = await response.json();
                showResult('offerResult', JSON.stringify(result, null, 2), response.ok ? 'success' : 'error');
            } catch (error) {
                if (error instanceof SyntaxError) {
                    showResult('offerResult', 'Invalid JSON format. Please check your JSON syntax.', 'error');
                } else {
                    showResult('offerResult', 'Error: ' + error.message, 'error');
                }
            }
        });

        // Upload Leads
        document.getElementById('leadsForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData();
            const fileInput = document.getElementById('csvFile');
            formData.append('file', fileInput.files[0]);

            try {
                const response = await fetch('/leads/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                showResult('leadsResult', JSON.stringify(result, null, 2), response.ok ? 'success' : 'error');
            } catch (error) {
                showResult('leadsResult', 'Error: ' + error.message, 'error');
            }
        });

        // Score Leads
        async function scoreLeads() {
            const loadingBar = document.getElementById('loadingBar');
            const scoreBtn = document.getElementById('scoreBtn');
            
            try {
                loadingBar.style.display = 'block';
                scoreBtn.disabled = true;
                scoreBtn.textContent = 'Processing...';

                const response = await fetch('/score', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                showResult('scoreResult', JSON.stringify(result, null, 2), response.ok ? 'success' : 'error');
            } catch (error) {
                showResult('scoreResult', 'Error: ' + error.message, 'error');
            } finally {
                loadingBar.style.display = 'none';
                scoreBtn.disabled = false;
                scoreBtn.textContent = 'Score All Leads';
            }
        }

        // Get Results
        async function getResults() {
            try {
                const response = await fetch('/result');
                const result = await response.json();
                showResult('resultsDisplay', JSON.stringify(result, null, 2), response.ok ? 'success' : 'error');
            } catch (error) {
                showResult('resultsDisplay', 'Error: ' + error.message, 'error');
            }
        }

        // Helper function to show results
        function showResult(elementId, message, type) {
            const resultDiv = document.getElementById(elementId);
            resultDiv.textContent = message;
            resultDiv.className = `result ${type}`;
            resultDiv.style.display = 'block';
        }
    </script>
</body>

</html>